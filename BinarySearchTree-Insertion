// Online Java Compiler
// Use this editor to write, compile and run your Java code online
 class TreeNode{
    int data;
    TreeNode left;
    TreeNode right;
    
    public TreeNode(int key){
        data = key;
        left = null;
        right = null;
    }
}
class HelloWorld {
    public static void main(String[] args) {
        
       System.out.println("Hello, World!"); 
       TreeNode root = insertBinaryTree(null,21);
       System.out.println("size of the tree is: "+ sizeOfTree(root));
       System.out.println("preodertraversal is: ");
       preOrderTravel(root);
       System.out.println();
       
        root = insertBinaryTree(root,14);
        System.out.println("size of the tree is: "+ sizeOfTree(root));
       System.out.println("preodertraversal is: ");
       preOrderTravel(root);
       
       
        root = insertBinaryTree(root,25);
       System.out.println("size of the tree is: "+ sizeOfTree(root));
       System.out.println("preodertraversal is: ");
       preOrderTravel(root);
       
        root = insertBinaryTree(root,8);
        System.out.println("size of the tree is: "+ sizeOfTree(root));
        System.out.println("preodertraversal is: ");
        preOrderTravel(root);
       
        root = insertBinaryTree(root,9);
        System.out.println("size of the tree is: "+ sizeOfTree(root));
        System.out.println("preodertraversal is: ");
        preOrderTravel(root);
       
        root = insertBinaryTree(root,26);
        System.out.println("size of the tree is: "+ sizeOfTree(root));
        System.out.println("preodertraversal is: ");
        preOrderTravel(root);
       
        
    }
    
    public static int sizeOfTree(TreeNode root){
        if(root == null){
            return 0;
        }
        return sizeOfTree(root.left) + sizeOfTree(root.right) +1;
    }
    
    public static void preOrderTravel(TreeNode root){
        if(root == null){
            return;
        }
        System.out.print(root.data+"  ");
        preOrderTravel(root.left);
        preOrderTravel(root.right);
        
    }
    public static TreeNode insertBinaryTree(TreeNode root, int key){
        TreeNode curr= root;
        if(root == null){
            root = new TreeNode(key);
        }
        
        while(curr != null){
             if(key > curr.data){
                 if(curr.right == null){
                     curr.right = new TreeNode(key);
                     break;
                 }else{
                     curr = curr.right;
                 }
                 
             }else{
                if(curr.left == null){
                    curr.left = new TreeNode(key);
                    break;
                }else{
                    curr = curr.left;
                }             
                 
             }   
        }
        return root;
    }
    
     public static int heightOfTree(TreeNode root){
        if(root == null)
            return 0;
        return Math.max(heightOfTree(root.left), heightOfTree(root.right))+1;
    }
}
